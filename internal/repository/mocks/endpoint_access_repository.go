// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mistandok/auth/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// EndpointAccessRepository is an autogenerated mock type for the EndpointAccessRepository type
type EndpointAccessRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *EndpointAccessRepository) Create(_a0 context.Context, _a1 *model.EndpointAccess) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.EndpointAccess) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.EndpointAccess) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.EndpointAccess) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAddressAndRole provides a mock function with given fields: ctx, address, role
func (_m *EndpointAccessRepository) GetByAddressAndRole(ctx context.Context, address string, role model.UserRole) (*model.EndpointAccess, error) {
	ret := _m.Called(ctx, address, role)

	if len(ret) == 0 {
		panic("no return value specified for GetByAddressAndRole")
	}

	var r0 *model.EndpointAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.UserRole) (*model.EndpointAccess, error)); ok {
		return rf(ctx, address, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.UserRole) *model.EndpointAccess); ok {
		r0 = rf(ctx, address, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EndpointAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.UserRole) error); ok {
		r1 = rf(ctx, address, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEndpointAccessRepository creates a new instance of EndpointAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpointAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EndpointAccessRepository {
	mock := &EndpointAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
