// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// WhiteListRepository is an autogenerated mock type for the WhiteListRepository type
type WhiteListRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, userID
func (_m *WhiteListRepository) Get(ctx context.Context, userID int64) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, userID, jwtString, expireIn
func (_m *WhiteListRepository) Set(ctx context.Context, userID int64, jwtString string, expireIn time.Duration) error {
	ret := _m.Called(ctx, userID, jwtString, expireIn)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, time.Duration) error); ok {
		r0 = rf(ctx, userID, jwtString, expireIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWhiteListRepository creates a new instance of WhiteListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhiteListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WhiteListRepository {
	mock := &WhiteListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
